name: Notify Slack on Re-Requested Review

# 'review_requested' 이벤트 감지
on:
  pull_request:
    types: [review_requested]
    branches:
      - '**'

jobs:
  notify-slack:
    runs-on: ubuntu-latest

    steps:
      - name: Send Slack Notification with Mentions
        run: |
          # PR 정보 가져오기
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_URL="${{ github.event.pull_request.html_url }}"
          PR_ACTION="${{ github.event.action }}"  # PR 상태(opened, review_requested)
          PR_IS_DRAFT=${{ github.event.pull_request.draft }}
          
          # Draft PR일 경우 알림 스킵
          if [ "$PR_ACTION" == "opened" ] && [ "$PR_IS_DRAFT" == "true" ]; then
          echo "Draft PR입니다. Slack 알림을 생략합니다."
          exit 0  # 워크플로우 종료
          fi
          
          # PR 작성자와 리뷰어의 GitHub 로그인 정보
          PR_AUTHOR="${{ github.event.pull_request.user.login }}"
          REQUESTED_REVIEWER="${{ github.event.requested_reviewer.login }}"
          
          # GitHub 사용자명과 Slack ID 매핑
          declare -A GITHUB_TO_SLACK
          GITHUB_TO_SLACK["chanbinme"]="U09FKG7RVTM"
          GITHUB_TO_SLACK["inyoung0215"]="U09FP4KJB5Z"
          GITHUB_TO_SLACK["7uckydog"]="U09FCTCRXPH"
          GITHUB_TO_SLACK["side-lucas"]="U09MKAGAF0W"
          
          # 작성자와 리뷰어의 Slack ID 가져오기
          # 작성자(PR_AUTHOR)가 비어있을 경우 처리
          if [ -z "$PR_AUTHOR" ]; then
          SLACK_AUTHOR_ID="작성자 정보 없음"  # 작성자 정보가 없을 때 표시할 메시지
          else
          SLACK_AUTHOR_ID=${GITHUB_TO_SLACK[$PR_AUTHOR]}
          fi
          
          # 리뷰어(REQUESTED_REVIEWER)가 비어있을 경우 처리
          if [ -z "$REQUESTED_REVIEWER" ]; then
          SLACK_REVIEWER_ID="리뷰어 정보 없음"  # 리뷰어 정보가 없을 때 표시할 메시지
          else
          SLACK_REVIEWER_ID=${GITHUB_TO_SLACK[$REQUESTED_REVIEWER]}
          fi
          
          # PR 상태에 따른 메시지 구분
          if [ "$PR_ACTION" == "opened" ]; then
            PR_STATUS="💌 *새 PR이 생성되었습니다!*"
          
            # 모든 사용자 멘션 생성
            ALL_MENTIONS=""
            for USER_ID in "${GITHUB_TO_SLACK[@]}"; do
              ALL_MENTIONS+="<@$USER_ID> "
            done
          elif [ "$PR_ACTION" == "ready_for_review" ]; then
            PR_STATUS="🏃 *리뷰를 받을 준비가 되었습니다!*"
          
            # 모든 사용자 멘션 생성
            ALL_MENTIONS=""
            for USER_ID in "${GITHUB_TO_SLACK[@]}"; do
              ALL_MENTIONS+="<@$USER_ID> "
            done
          elif [ "$PR_ACTION" == "review_requested" ]; then
            PR_STATUS="🏸 *리뷰 재요청이 발생했습니다!*"
            ALL_MENTIONS="<@$SLACK_REVIEWER_ID>"
          elif [ "$PR_ACTION" == "closed" ]; then
            if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
              PR_STATUS="✅ *PR Merged*"
              ALL_MENTIONS=""
            else
              PR_STATUS="❌ *PR Closed*"
              ALL_MENTIONS=""
            fi
          elif [ "$PR_ACTION" == "reopened" ]; then
            PR_STATUS="♻️ *PR이 다시 열렸습니다!*"
            # PR이 다시 열릴 때도 모든 사용자에게 알림
            ALL_MENTIONS=""
            for USER_ID in "${GITHUB_TO_SLACK[@]}"; do
            ALL_MENTIONS+="<@$USER_ID> "
            done
          else
            PR_STATUS="☝️ *PR 업데이트 알림*"
            ALL_MENTIONS=""
          fi
          
          # Slack Webhook 호출
          curl -X POST \
               -H 'Content-type: application/json' \
               --data '{
                 "text": "'"${PR_STATUS}"'\n*PR 제목:* '"${PR_TITLE}"' (#'"${PR_NUMBER}"')\n*작성자:* <@'"${SLACK_AUTHOR_ID}"'>\n*리뷰어:* '"${ALL_MENTIONS}"'\n*링크:* '"${PR_URL}"'"
               }' \
               ${{ secrets.SLACK_WEBHOOK_URL}}
